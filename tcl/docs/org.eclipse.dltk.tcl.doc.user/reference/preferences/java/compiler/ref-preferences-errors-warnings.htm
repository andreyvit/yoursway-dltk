<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2007. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Errors/Warnings</title>
<link rel="stylesheet" href="../../../../book.css" charset="ISO-8859-1" type="text/css">
<script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript"> </script>
</head>
<body>
<h1>Errors/Warnings</h1>
<p>Indicate your preferences for the Errors/Warnings settings on the <a class="command-link" href='javascript:executeCommand("org.eclipse.ui.window.preferences(preferencePageId=org.eclipse.jdt.ui.preferences.ProblemSeveritiesPreferencePage)")'> <img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="Opens the Errors/Warnings preference page"> <b> Java &gt; Compiler &gt; Errors/Warnings </b></a> preference page.</p>
<p></p>
<h3>Code style</h3>
<p></p>
<table border="1" cellspacing="0" cellpadding="5" width="100%">
	<tr>
		<th>
		<p>Option</p>
		</th>
		<th>
		<p>Description</p>
		</th>
		<th>
		<p>Default</p>
		</th>
	</tr>
	<tr>
		<td valign="top">
		<p>Non-static access to a static member</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever a static field or method is accessed with an expression receiver. A reference to a static member should be qualified with a type name.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Indirect access to a static member</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever a static field or method is indirectly accessed. A static field of an interface should be qualified with the declaring type name.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Unqualified access to instance field</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters a field access which is not qualified (e.g. misses a 'this').</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Undocumented empty block</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters an empty block statement with no explaining comment.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Access to a non-accessible member of an enclosing type</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it emulates access to a non-accessible member of an enclosing type. Such accesses can have performance implications.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Method with a constructor name</p>
		</td>
		<td valign="top">
		<p>Naming a method with a constructor name is generally considered poor style programming. When enabling this option, the compiler will signal such scenario either as an error or a warning.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Parameter assignment</p>
		</td>
		<td valign="top">
		<p>Assigning a value to a parameter is generally considered poor style programming. When enabling this option, the compiler will signal such scenario either as an error or a warning.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Non-externalized strings</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning for non externalized String literal (i.e. non tagged with //$NON-NLS-&lt;n&gt;$) or for non externalized String tags which do not belong to a String.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
</table>
<p></p>
<h3>Potential programming problems</h3>
<p></p>
<table border="1" cellspacing="0" cellpadding="5" width="100%">
	<tr>
		<td valign="top">
		<p>Serializable class without serialVersionUID</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever a type implementing 'java.io.Serializable' does not contain a serialVersionUID field.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Assignment has no effect (e.g. 'x = x')</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever an assignment has no effect (e.g. 'x = x').</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Possible accidental boolean assignment (e.g. 'if (a = b)')</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters a possible accidental boolean assignment (e.g. 'if (a = b)').</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>'finally' does not complete normally</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever a 'finally' statement does not complete normally (e.g. contains a return statement).</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Empty statement</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters an empty statement (e.g. a superfluous semicolon).</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Using a char array in string concatenation</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever a char[] expression is used in String concatenations,</p>
		<code>"hello" + new char[]{'w','o','r','l','d'}</code></td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Hidden catch blocks</p>
		</td>
		<td valign="top">
		<p>Locally to a try statement, some catch blocks may hide others , e.g.</p>
		<code>try { throw new java.io.CharConversionException();</code><br>
		<code>} catch (java.io.CharConversionException e) {</code><br>
		<code>} catch (java.io.IOException e) {}.</code><br>
		<br>
		<p>When enabling this option, the compiler will issue an error or a warning for hidden catch blocks corresponding to checked exceptions.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Inexact type match for vararg arguments</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters an inexact type match for vararg arguments.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Boxing and unboxing conversions</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters a boxing or unboxing conversion. Autoboxing may affects performance negatively.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Enum type constant not covered on 'switch'</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters a switch statement which does not contain case statements for every enum constant of the referenced enum.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>'switch' case fall-through</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters a switch case without a 'break' statement. Empty switch cases are allowed.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Null pointer access</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning when it encounters that a local variable which is certainly null is dereferenced. Note that the analysis can not find all null pointer accesses, see <strong>Potential null pointer access</strong>.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Potential null pointer access</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning when it encounters that a local variable which may be null is dereferenced. Note that the analysis is fairly conservative, it only considers cases where there is something suspicious.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
</table>
<p></p>
<h3>Name shadowing and conflicts</h3>
<p></p>
<table border="1" cellspacing="0" cellpadding="5" width="100%">
	<tr>
		<td valign="top">
		<p>Field declaration hides another field or variable</p>
		</td>
		<td valign="top">
		<p>When enabling this option, the compiler will issue an error or a warning if a field declaration hides another inherited field.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Local variable declaration hides another field or variable</p>
		</td>
		<td valign="top">
		<p>When enabling this option, the compiler will issue an error or a warning if a local variable declaration hides another field or variable.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Include constructor or setter method parameters</p>
		</td>
		<td valign="top">
		<p>When enabling this option, the compiler additionally will issue an error or a warning if a constructor or setter method parameter hides another field or variable.</p>
		</td>
		<td valign="top">
		<p>Off</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Type parameter hides another type</p>
		</td>
		<td valign="top">
		<p>When enabling this option, the compiler will issue an error or a warning if i.e. a type parameter of an inner class hides an outer type.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Methods overridden but not package visible</p>
		</td>
		<td valign="top">
		<p>A package default method is not visible in a different package, and thus cannot be overridden. When enabling this option, the compiler will signal such scenario either as an error or a warning.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Interface method conflicts with protected 'Object' method</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever an interface defines a method incompatible with a non-inherited Object method. Until this conflict is resolved, such an interface cannot be implemented, e.g.</p>
		<code>interface I {</code><br>
		<code>&nbsp;&nbsp;&nbsp;int clone();</code><br>
		<code>}</code><br>
		<br>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
</table>
<p></p>
<h3>Deprecated and restricted API</h3>
<p></p>
<table border="1" cellspacing="0" cellpadding="5" width="100%">
	<tr>
		<td valign="top">
		<p>Deprecated API</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will signal use of deprecated API either as an error or a warning.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Signal use of deprecated API inside deprecated code</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will signal use of deprecated API inside deprecated code. The severity of the problem is controlled with option "Deprecated API".</p>
		</td>
		<td valign="top">
		<p>Off</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Signal overriding or implementing deprecated method</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will signal overriding or implementing a deprecated method The severity of the problem is controlled with option "Deprecated API".</p>
		</td>
		<td valign="top">
		<p>Off</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Forbidden reference (access rules)</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will signal a forbidden reference specified in the access rules.</p>
		</td>
		<td valign="top">
		<p>Error</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Discouraged reference (access rules)</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will signal a discouraged reference specified in the access rules.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
</table>
<p></p>
<h3>Unnecessary code</h3>
<p></p>
<table border="1" cellspacing="0" cellpadding="5" width="100%">
	<tr>
		<td valign="top">
		<p>Local variable is never read</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever a local variable is declared but never used within its scope.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Parameter is never read</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever a parameter is declared but never used within its scope.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Check overriding and implementing methods</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler additionally will issue an error or a warning whenever a parameter is declared but never used within its scope in overriding or implementing methods.</p>
		</td>
		<td valign="top">
		<p>Off</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Ignore parameters documented with '@param' tag</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will not issue an error or a warning whenever an unread parameter is documented with an '@param' tag.</p>
		</td>
		<td valign="top">
		<p>On</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Unused import</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning for unused import reference.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Unused local or private members</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever a local or private member is declared but never used within the same unit.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Redundant null check</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever a local variable which can not be null is tested for null.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Unnecessary 'else' statement</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters an unnecessary else statement (e.g. if (condition) return; else doSomething();).</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Unnecessary cast or 'instanceof' operation</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters an unnecessary cast or 'instanceof' operation (e.g. if (object instanceof Object) return;).</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Unnecessary declaration of thrown checked exception</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters an unnecessary declaration of a thrown exception.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Check overriding and implementing methods</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler additionally will issue an error or a warning whenever it encounters an unnecessary declaration of a thrown exception in an overriding or implementing method.</p>
		</td>
		<td valign="top">
		<p>Off</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Unused 'break' or 'continue' label</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters an unused 'break' or 'continue' label.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
</table>
<p></p>
<h3>Generic types</h3>
<p></p>
<table border="1" cellspacing="0" cellpadding="5" width="100%">
	<tr>
		<td valign="top">
		<p>Unchecked generic type operation</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters an unchecked generic type operation.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Usage of a raw type</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters a usage of a raw type (i.e. List instead of List&lt;String&gt;).</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Generic type parameter declared with a final type bound</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters a type bound involving a final type.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
</table>
<p></p>
<h3>Annotations</h3>
<p></p>
<table border="1" cellspacing="0" cellpadding="5" width="100%">
	<tr>
		<td valign="top">
		<p>Missing '@Override' annotation</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters a method overriding another implemented method, and the '@Override' annotation is missing.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Missing '@Deprecated' annotation</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters a deprecated type without additional '@Deprecated' annotation.</p>
		</td>
		<td valign="top">
		<p>Ignore</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Annotation is used as super interface</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters a type implementing an annotation. Although possible, this is considered bad practice.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Unhandled warning tokens in '@SuppressWarnings'</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will issue an error or a warning whenever it encounters an unhandled warning token in a '@SuppressWarnings' annotation.</p>
		</td>
		<td valign="top">
		<p>Warning</p>
		</td>
	</tr>
	<tr>
		<td valign="top">
		<p>Enable '@SuppressWarnings' annotations</p>
		</td>
		<td valign="top">
		<p>When enabled, the compiler will process '@SuppressWarnings' annotations.</p>
		</td>
		<td valign="top">
		<p>On</p>
		</td>
	</tr>
</table>

<p>When enabled <strong>Treat errors like fatal compile errors</strong> all generated errors, fatal or configurable, lead to non executable code.
If disabled then your code can be executed as long as it has no fatal error (i.e. syntax error)</p>

<p><img src="../../../../images/ngrelc.png" alt="Related concepts" border="0"></p>
<p><a href="../../../../../org.eclipse.platform.doc.user/concepts/cprbview.htm">Problems View</a><br>
<a href="../../../../concepts/cquickfix.htm">Quick Fix</a><br>
<a href="../../../../concepts/concepts-4.htm">Java builder</a></p>
</body>
</html>
