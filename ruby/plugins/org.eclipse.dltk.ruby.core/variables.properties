# =====================
# Exception information
# =====================

# $!
ei_exception_name=$!
ei_exception_type=Exception
ei_exception_doc=The exception object passed to raise.

# $@
ei_backtrace_name=$@
ei_backtrace_type=Array
ei_backtrace_doc=The stack backtrace generated by the last exception.

# ==========================
# Pattern matching variables
# ==========================

# $&
pmv_match_name=$&
pmv_match_type=String
pmv_match_doc=The string matched (following a successful pattern match). This variable is local to the current scope.

# $+
pmv_highgroup_name=$+
pmv_highgroup_type=String
pmv_highgroup_doc=The contents of the highest-numbered group matched following a successful pattern match. Thus, in "cat" =~/(c|a)(t|z)/, $+ will be set to "t". This variable is local to the current scope.

# $`
pmv_precmatch_name=$`
pmv_precmatch_type=String
pmv_precmatch_doc=The string preceding the match in a successful pattern match. This variable is local to the current scope.

# $'
pmv_match_name=$'
pmv_match_type=String
pmv_match_doc=The string following the match in a successful pattern match. This variable is local to the current scope.

# $=
pmv_xxx_name=$=
pmv_xxx_type=Object
pmv_xxx_doc=Deprecated. If set to any value apart from nil or false, all pattern matches will be case insensitive, string comparisons will ignore case, and string hash values will be case insensitive.

# $2
pmv_group1_name=$1
pmv_group1_type=String
pmv_group1_doc=The contents of successive groups matched in a successful pattern match. In "cat" =~/(c|a)(t|z)/, $1 will be set to "a" and $2 to "t". This variable is local to the current scope.

# $2
pmv_group2_name=$2
pmv_group2_type=String
pmv_group2_doc=The contents of successive groups matched in a successful pattern match. In "cat" =~/(c|a)(t|z)/, $1 will be set to "a" and $2 to "t". This variable is local to the current scope.

# $3
pmv_group3_name=$3
pmv_group3_type=String
pmv_group3_doc=The contents of successive groups matched in a successful pattern match. In "cat" =~/(c|a)(t|z)/, $1 will be set to "a" and $2 to "t". This variable is local to the current scope.

# $4
pmv_group4_name=$4
pmv_group4_type=String
pmv_group4_doc=The contents of successive groups matched in a successful pattern match. In "cat" =~/(c|a)(t|z)/, $1 will be set to "a" and $2 to "t". This variable is local to the current scope.

# $5
pmv_group5_name=$5
pmv_group5_type=String
pmv_group5_doc=The contents of successive groups matched in a successful pattern match. In "cat" =~/(c|a)(t|z)/, $1 will be set to "a" and $2 to "t". This variable is local to the current scope.

# $6
pmv_group6_name=$6
pmv_group6_type=String
pmv_group6_doc=The contents of successive groups matched in a successful pattern match. In "cat" =~/(c|a)(t|z)/, $1 will be set to "a" and $2 to "t". This variable is local to the current scope.

# $7
pmv_group7_name=$7
pmv_group7_type=String
pmv_group7_doc=The contents of successive groups matched in a successful pattern match. In "cat" =~/(c|a)(t|z)/, $1 will be set to "a" and $2 to "t". This variable is local to the current scope.

# $8
pmv_group8_name=$8
pmv_group8_type=String
pmv_group8_doc=The contents of successive groups matched in a successful pattern match. In "cat" =~/(c|a)(t|z)/, $1 will be set to "a" and $2 to "t". This variable is local to the current scope.

# $9
pmv_group9_name=$9
pmv_group9_type=String
pmv_group9_doc=The contents of successive groups matched in a successful pattern match. In "cat" =~/(c|a)(t|z)/, $1 will be set to "a" and $2 to "t". This variable is local to the current scope.

# $~
pmv_patmatch_name=$~
pmv_patmatch_type=MatchData
pmv_patmatch_doc=An object that encapsulates the results of a successful pattern match. The variables $&, $`, $', and $1 to $9 are all derived from $~. Assigning to $~ changes the values of these derived variables. This variable is local to the current scope.

# ======================
# Input/Output variables
# ======================

# $/
io_inputrecsep_name=$/
io_inputrecsep_type=String
io_inputrecsep_doc=The input record separator (newline by default). This is the value that routines such as Kernel#gets use to determine record boundaries. If set to nil, gets will read the entire file.

# $0
io_inputrecsep2_name=$0
io_inputrecsep2_type=String
io_inputrecsep2_doc=Synonym for $/.

# $\
io_appendstr_name=$\
io_appendstr_type=String
io_appendstr_doc=The string appended to the output of every call to methods such as Kernel#print and IO#write. The default value is nil.

# $,
io_paramsep_name=$,
io_paramsep_type=String
io_paramsep_doc=The separator string output between the parameters to methods such as Kernel#print and Array#join. Defaults to nil, which adds no text.

# $.
io_lastline_name=$.
io_lastline_type=Fixnum
io_lastline_doc=The number of the last line read from the current input file.

# $;
io_defaultsep_name=$;
io_defaultsep_type=String
io_defaultsep_doc=The default separator pattern used by String#split. May be set from the command line using the F flag.

# $<
io_xinput_name=$<
io_xinput_type=Object
io_xinput_doc=An object that provides access to the concatenation of the contents of all the files given as command-line arguments or $stdin (in the case where there are no arguments).

# $>
io_xoutput_name=$>
io_xoutput_type=IO
io_xoutput_doc=The destination of output for Kernel#print and Kernel#printf. The default value is $stdout.

# $_
io_lastline_name=$_
io_lastline_type=String
io_lastline_doc=The last line read by Kernel#gets or Kernel#readline. Many stringrelated functions in the Kernel module operate on $_ by default. The variable is local to the current scope.

# $defout
io_defoutput_name=$defout
io_defoutput_type=IO
io_defoutput_doc=Synonym for $>. Obsolete: use $stdout.

# $deferr
io_deferr_name=$deferr
io_deferr_type=IO
io_deferr_doc=Synonym for STDERR. Obsolete: use $stderr.

# $F
io_defaultsep2_name=$F
io_defaultsep2_type=String
io_defaultsep2_doc=Synonym for $;.

# $stderr
io_stderr_name=$stderr
io_stderr_type=IO
io_stderr_doc=The current standard error output.

# $stdin
io_stdin_name=$stdin
io_stdin_type=IO
io_stdin_doc=The current standard input.

# $stdout
io_stdout_name=$stdout
io_stdout_type=IO
io_stdout_doc=The current standard output. Assignment to $stdout is deprecated: use $stdout.reopen instead.

# ===============================
# Execution environment variables
# ===============================

# TODO :)

# ================
# Standard objects
# ================

# ARGF
so_argf_name=ARGF
so_argf_ Object
so_argf_A synonym for $<.

# ARGV
so_argv_name=ARGV
so_argv_type=Array
so_argv_doc=A synonym for $*.

# ENV
so_env_name=ENV
so_env_type=Object
so_env_doc=A hash-like object containing the program's environment variables. An instance of class Object, ENV implements the full set of Hash methods. Used to query and set the value of an environment variable, as in ENV["PATH"] and ENV["term"]="ansi".

# false
so_false_name=false
so_false_type=FalseClass
so_false_doc=Singleton instance of class FalseClass. [r/o]

# nil
so_nil_name=nil
so_nil_type=NilClass
so_nil_doc=The singleton instance of class NilClass. The value of uninitialized instance and global variables. [r/o]

# self
so_self_name=self
so_self_type=Object
so_self_doc=The receiver (object) of the current method. [r/o]

# true
so_true_name=true
so_true_type=TrueClass
so_true_doc=Singleton instance of class TrueClass. [r/o]

# ================
# Global constants
# ================

# DATA
gc_data_name=DATA
gc_data_type=IO
gc_data_doc=If the the main program file contains the directive __END__, then the constant DATA will be initialized so that reading from it will return lines following __END__ from the source file.

# FALSE
gc_false_name=FALSE
gc_false_type=FalseClass
gc_false_doc=Synonym for false.

# NIL
gc_nil_name=NIL
gc_nil_type=NilClass
gc_nil_doc=Synonym for nil.

# RUBY_PLATFORM
gc_rubyplatform_name=RUBY_PLATFORM
gc_rubyplatform_type=String
gc_rubyplatform_doc=The identifier of the platform running this program. This string is in the same form as the platform identifier used by the GNU configure utility (which is not a coincidence).

# RUBY_RELEASE_DATE
gc_rubyreleasedate_name=RUBY_RELEASE_DATE
gc_rubyreleasedate_type=String
gc_rubyreleasedate_doc=The date of this release.

# RUBY_VERSION
gc_rubyversion_name=RUBY_VERSION
gc_rubyversion_type=String
gc_rubyversion_doc=The version number of the interpreter.

# STDERR
gc_stderr_name=STDERR
gc_stderr_type=IO
gc_stderr_doc=The actual standard error stream for the program. The initial value of $stderr.

# STDIN
gc_stdin_name=STDIN
gc_stdin_type=IO
gc_stdin_doc=The actual standard input stream for the program. The initial value of $stdin.

# STDOUT
gc_stdout_name=STDOUT
gc_stdout_type=IO
gc_stdout_doc=The actual standard output stream for the program. The initial value of $stdout.

# SCRIPT_LINES__
gc_scriptlines_name=SCRIPT_LINES__
gc_scriptlines_type=Hash
gc_scriptlines_doc=If a constant SCRIPT_LINES__ is defined and references a Hash, Ruby will store an entry containing the contents of each file it parses, with the file's name as the key and an array of strings as the value.

# TOPLEVEL_BINDING
gc_toplevelbinding_type=TOPLEVEL_BINDING
gc_toplevelbinding_type=Binding
gc_toplevelbinding_type=A Binding object representing the binding at Ruby's top level-the level where programs are initially executed.

# TRUE
gc_true_name=TRUE
gc_true_type=TrueClass
gc_true_doc=Synonym for true.
